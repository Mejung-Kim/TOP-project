package kdb.spring.web.controller;

import java.io.File;
import java.io.IOException;
import java.util.Iterator;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import kdb.spring.service.StylerService;
import kdb.spring.service.UserService;
import kdb.spring.vo.UserVo;
import mail.MailSend;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;

@Controller
public class UserController {
	@Resource(name="userService") //객체 생성.
	private UserService userService;
	
	@Resource(name="stylerService")
	private StylerService stylerService;
	
	@RequestMapping(value="{url}.do")
	public void url(){}
	
	@RequestMapping("/insert.do")
	public ModelAndView insert(UserVo vo){
		
		System.out.println("UserController insert()");
		int data = userService.createUser(vo);
		ModelAndView mv = new ModelAndView();
		mv.addObject("data", data);
		mv.setViewName("jsonView");
		//System.out.println("=================================================");
		//System.out.println(vo.getUserName());
		//System.out.println("data = " + data);

		return mv;
	}
	
	/**
	 * facebook회원 가입.
	 * */
	@RequestMapping("/insertFb.do")
	public ModelAndView insertFb(UserVo vo, HttpSession session){
		int data = userService.insertFb(vo);
		
		if(vo != null) {
			//세션에 아이디&비번 정보 저장
			session.setAttribute("userId", vo.getUserId());
		}
		vo.setUserId((String)session.getAttribute("userId"));
		System.out.println("=================================");
		System.out.println(session.getAttribute("userId"));
		System.out.println(session.getAttribute("userName"));
		ModelAndView mv = new ModelAndView();
		mv.addObject("data", data);
		mv.setViewName("jsonView");
		System.out.println("data = " + data);
		System.out.println(mv);
		return mv;
		
	}
	
	/**
	 * id중복체크
	 * */
	@RequestMapping("/idCheck.do")
	public ResponseEntity<String> check(String userId){ //받는인수 : 이름이 동일해야 자동 맴핑
		String message = "You can use this!";
		UserVo vo = userService.idCheck(userId);
		if(vo!=null)message="You can not use this!";
		
		HttpHeaders header = new HttpHeaders();
		header.add("Content-Type", "text/html;charset=UTF-8");
		ResponseEntity<String> re = 
				new ResponseEntity<String>(message, header, HttpStatus.OK);
		
		return re;
	}
	/**
	 * 별명중복체크
	 * */
	@RequestMapping("/nickCheck.do")
	public ResponseEntity<String> nickCheck(String nickname){ //받는인수 : 이름이 동일해야 자동 맴핑
		String message1 = "You can use this!";
		UserVo vo = userService.nickCheck(nickname);
		if(vo!=null)message1="You can not use this!";
		
		HttpHeaders header = new HttpHeaders();
		header.add("Content-Type", "text/html;charset=UTF-8");
		ResponseEntity<String> re = 
				new ResponseEntity<String>(message1, header, HttpStatus.OK);
		
		return re;
	}
	
	/**
	 * login 
	 * */
	@RequestMapping("/login.do")
	public ResponseEntity<String> loginCheck(UserVo vo, HttpSession session){ //받는인수 : 이름이 동일해야 자동 맴핑
		String message1 = null;
		vo = userService.loginCheck(vo);
		if(vo != null) {
			message1="1";
			//세션에 정보 저장
			session.setAttribute("userId", vo.getUserId());
			session.setAttribute("pass", vo.getPass());
			session.setAttribute("userName", vo.getUserName());
			session.setAttribute("nickname", vo.getNickname());
			session.setAttribute("userNo", vo.getUserNo());
			session.setAttribute("profileImg", vo.getProfileImg());
			session.setAttribute("intro", vo.getIntro());
		}	
		//System.out.println("userId="+session.getAttribute("userId"));
		//System.out.println("password="+session.getAttribute("pass"));
		//System.out.println("userName="+session.getAttribute("userName"));
		HttpHeaders header = new HttpHeaders();
		header.add("Content-Type", "text/html;charset=UTF-8");
		ResponseEntity<String> re = 
				new ResponseEntity<String>(message1, header, HttpStatus.OK);
		return re;
	}
	
	/**
	 * logout
	 * */
	@RequestMapping("/logout.do")
	public void logoutPro(HttpSession session, HttpServletResponse response){
		session.invalidate();
		try {
			response.sendRedirect("main.do");
		} catch (IOException e) {
			e.printStackTrace();
		}
		
	}	
	
	/**
	 * 비밀번호 찾기
	 * @param userId
	 * @return
	 */
	@RequestMapping("/mail.do")
	public ResponseEntity<String> mailsender(String userId){ //받는인수 : 이름이 동일해야 자동 맴핑
		String message = "존재하지 않는 아이디 입니다.";
		UserVo vo = userService.idCheck(userId);
		if(vo!=null)
			{
			message="아이디가 확인되었습니다.\n아이디로 비밀번호가 전송되었습니다.";			
				MailSend mail = new MailSend();
				mail.sendMail(vo.getUserId(),vo.getUserId()+"님의 비밀번호는 "+vo.getPass()+" 입니다.");
			}
		HttpHeaders header = new HttpHeaders();
		header.add("Content-Type", "text/html;charset=UTF-8");
		ResponseEntity<String> re = 
				new ResponseEntity<String>(message, header, HttpStatus.OK);
		
		return re;
	} 
	
	/**
	 * 회원정보수정
	 * */
	@RequestMapping("/update.do")
	public ModelAndView updateInfo(UserVo vo, HttpSession session){
		vo.setUserId((String)session.getAttribute("userId"));
		int data = userService.updateInfo(vo);
		ModelAndView mv = new ModelAndView();
		mv.addObject("data", data);
		mv.setViewName("jsonView");
		System.out.println("data = " + data);
		System.out.println(mv);
		session.setAttribute("nickname", vo.getNickname());
		return mv;
	}
	
	/**
	 * 회원탈퇴
	 * */
	@RequestMapping("/deleteUser.do")
	public ModelAndView deleteUser(String userId, HttpSession session){
		userId = (String) session.getAttribute("userId");
		int data = userService.deleteUser(userId);
		ModelAndView mv = new ModelAndView();
		mv.addObject("data",data);
		System.out.println(data);
		mv.setViewName("jsonView");
		return mv;
	}
	
	/**
	 * 자기소개 수정
	 */
	@RequestMapping("/updateIntro.do")
	public ModelAndView updateIntro(UserVo vo, HttpSession session, String intro){		
		System.out.println(intro);
		vo.setUserNo((Integer)session.getAttribute("userNo"));
		vo.setIntro(intro);
		int data = userService.updateIntro(vo);
		session.setAttribute("intro", vo.getIntro());
		
		ModelAndView mv = new ModelAndView();
		mv.addObject("data", data);
		mv.addObject("vo",vo);
		mv.setViewName("jsonView");
		System.out.println("data = " + data);
		System.out.println(mv);
		System.out.println(session.getAttribute("intro"));
		System.out.println(session.getAttribute("userNo"));
		
		return mv;
	}
	
	/**
	 * 프로필 이미지 수정
	 */
	@RequestMapping(value = "/uploadImage.do", method = RequestMethod.POST)
	public @ResponseBody String upload(MultipartHttpServletRequest request, HttpServletResponse response, HttpSession session) {                 
		 System.out.println("uploadImage 실행중");
		 
		 //item2 디렉토리 생성 
		 String functionPath = "http://203.252.166.189:8000//FassionScrapper//profileImage";
		 File functionDir = new File(functionPath);
		 if(!functionDir.exists()){
			 functionDir.mkdir();
		 }
		 
		 //item2.userNo 디렉토리 생성
		 String userNo = String.valueOf(session.getAttribute("userNo"));
		 String userDir = functionPath + "\\" + userNo;
		 File userDirFile = new File(userDir);
		
		 if(!userDirFile.exists()){
			 userDirFile.mkdir();
			 
		 }
		 
		 String item2Name = null;
		 
		 System.out.println("functionDir = "+functionDir);
	     Iterator<String> itr =  request.getFileNames();

	     while(itr.hasNext()){
	    	 String fname = itr.next();
	    	 MultipartFile mpf = request.getFile(fname);
	    	 item2Name = "profileImage.jpg";
	    	 
	    	 try {
	    		 
	    		//폴더안에 있는파일 삭제
					File dir = new File(userDir);
					
					for(String fName: dir.list()){
						new File(userDir+"/"+fName).delete();
					}
					
	    		 
				mpf.transferTo(new File(userDir+"\\"+item2Name));
				System.out.println("path:"+userDir+"\\"+item2Name);
			} catch (Exception e) {
				e.printStackTrace();
			}
	    	 
	    	 UserVo vo = new UserVo((Integer)session.getAttribute("userNo"), item2Name);
	    	 stylerService.updateProfile(vo);
	     }
	     
	     System.out.println("uploadImage end");
	     return item2Name;	 
	  }
	
	/**
	 * 프로필이미지 불러오기
	 */
	@RequestMapping(value = "/loadProfile.do", method = RequestMethod.POST)
	public ModelAndView loadItem2(MultipartHttpServletRequest request, HttpServletResponse response, HttpSession session) {                 
		 System.out.println("loadProfile 실행중~~~");
		 
		 //유저의 개인 item2 저장 디렉토리 
		 String functionPath = session.getServletContext().getRealPath("/profileImage");
		 String userNo = String.valueOf(session.getAttribute("userNo"));
		 String userDir = functionPath + "\\" + userNo;
		
		 ModelAndView mv = new ModelAndView();
		 mv.setViewName("myPage");
		 
		 File userDirFile = new File(userDir);
		 
		 if(!userDirFile.exists()){
			 userDirFile.mkdir();
			 return mv;
		 }
		 
		 String[] fileList = userDirFile.list();
		 
		 for(String str : fileList){
			 System.out.println(str);
		 }
		 
		 mv.addObject("fileList", fileList);
	     
	     System.out.println("Controller end");
	     return mv;
	 
	  }
}
